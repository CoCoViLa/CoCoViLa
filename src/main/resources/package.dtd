<?xml version='1.0' encoding='us-ascii'?>
<!--
  #%L
  CoCoViLa
  %%
  Copyright (C) 2003 - 2017 Institute of Cybernetics at Tallinn University of Technology
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->

<!-- The root node of a package -->
<!ELEMENT package	(name, description, daemon?, class*)>
<!-- A single alphanumeric word - no separators allowed -->
<!ELEMENT name	(#PCDATA)>
<!-- specifies the location of a metainterface, default is "<name>.java" -->
<!ELEMENT file	(#PCDATA)>
<!-- fully qualified name of a Java class this specification extends -->
<!ELEMENT extends	(#PCDATA)>
<!-- Free text - may contain many sentences-->
<!ELEMENT description	(#PCDATA)>
<!-- A daemon is a program that controls execution and visualisation of the component -->
<!ELEMENT daemon	(#PCDATA)>
<!-- A .png or .gif picture to be used in the toolbar -->
<!ELEMENT icon	(#PCDATA)>
<!-- A rich component - root node of a class -->
<!ELEMENT class	(name, file?, extends?, description, icon, daemon?, graphics, ports?, fields?)>
<!-- 
	type=class is the usual case, 
	type=relation defines a connection-line style visual appearance. 
	type=scheme defines a scheme as a component and <scheme name>.syn file should exist in the package's folder
	See package state for an example usage 
-->
<!ATTLIST class
	type (relation|class|scheme)	"class"
	static (true|false)	"false"
>
<!-- Field is an attribute of the rich component 
shown in the list of attributes in the Schema Editor.
If a field is 'hidden' it means that it will not be shown in the Object Properties window -->	
<!ELEMENT fields	(field*)>
<!ELEMENT field	(known?,default?)>
<!ATTLIST field 
	name	CDATA   #REQUIRED
	nature	(normal|input|goal)	"normal"
	type	CDATA	#IMPLIED
	value	CDATA	#IMPLIED
	description	CDATA	#IMPLIED
	hidden 	(true|false)	#IMPLIED
>
<!-- Graphics to display some info about the field together with the visual 
appearance of the rich component e.g 'text string="*self"' (or *selfWithName) displays its value -->
<!ELEMENT known	(graphics)>
<!ELEMENT default (graphics)>
<!-- A visual appearance of something composed of vector graphics' shapes and/or raster images -->
<!ELEMENT graphics ( bounds?, ( line | rect | oval | arc | polygon | image | text )*, painter? )>
<!ATTLIST graphics 
	showFields (true|false) "false"
>
<!-- painter of this class graphics -->
<!ELEMENT painter (#PCDATA)>
<!-- An area of the visual appearance that is active i.e. reacts on mouse clicks -->
<!ELEMENT bounds	EMPTY>
<!ATTLIST bounds
	x	CDATA	#REQUIRED
	y	CDATA	#REQUIRED
	width	CDATA	#REQUIRED
	height	CDATA	#REQUIRED       
>
<!-- Vector graphics' shapes for the visual appearance -->
<!-- The attributes (coordinates) x, y are relative to the location of the object 
(properties x, y in the syn file) -->
<!ELEMENT line	EMPTY>
<!ATTLIST line 
	x1	CDATA	#REQUIRED
	y1	CDATA	#REQUIRED
	x2	CDATA	#REQUIRED
	y2	CDATA	#REQUIRED
	colour	CDATA	#IMPLIED
	fixed	(true|false)	#IMPLIED
	stroke	CDATA	#IMPLIED
	transparency	CDATA	#IMPLIED
	linetype	CDATA	#IMPLIED
>
<!-- rectangle -->
<!ELEMENT rect	EMPTY>
<!ATTLIST rect
	x	CDATA	#REQUIRED
	y	CDATA	#REQUIRED
	width	CDATA	#REQUIRED
	height	CDATA	#REQUIRED       
	colour	CDATA   #IMPLIED
	linetype	CDATA	#IMPLIED
	filled	(true|false)	#IMPLIED
	transparency	CDATA	#IMPLIED
	fixed	(true|false)	#IMPLIED
	stroke	CDATA	#IMPLIED
>
<!-- oval -->
<!ELEMENT oval	EMPTY>
<!ATTLIST oval
	x	CDATA	#REQUIRED
	y	CDATA	#REQUIRED
	width	CDATA	#REQUIRED
	height	CDATA	#REQUIRED       
	colour	CDATA   #IMPLIED
	linetype	CDATA	#IMPLIED
	filled	(true|false)	#IMPLIED
	transparency	CDATA	#IMPLIED
	fixed	(true|false)	#IMPLIED
	stroke	CDATA	#IMPLIED
>
<!-- arc -->
<!ELEMENT arc	EMPTY>
<!ATTLIST arc
	x	CDATA	#REQUIRED
	y	CDATA	#REQUIRED
	width	CDATA	#REQUIRED
	height	CDATA	#REQUIRED       
	startAngle	CDATA	#REQUIRED
	arcAngle	CDATA	#REQUIRED
	colour	CDATA	#IMPLIED
	filled	(true|false)	#IMPLIED
	fixed	(true|false)	#IMPLIED
	stroke	CDATA	#IMPLIED
	transparency	CDATA	#IMPLIED
	linetype	CDATA	#IMPLIED
>
<!-- polygon -->
<!ELEMENT polygon	(point+)>
<!ATTLIST polygon
	colour	CDATA	#IMPLIED
	filled	(true|false)	#IMPLIED
	fixed	(true|false)	#IMPLIED
	stroke	CDATA	#IMPLIED
	transparency	CDATA	#IMPLIED
	linetype	CDATA	#IMPLIED
>
<!-- A helper object for polygon -->
<!ELEMENT point	EMPTY>
<!ATTLIST point
	x	CDATA	#REQUIRED
	y	CDATA	#REQUIRED
>
<!-- text -->
<!ELEMENT text	EMPTY>
<!ATTLIST text 
	string	CDATA	#REQUIRED
	colour	CDATA	#IMPLIED
	x	CDATA	#REQUIRED
	y	CDATA	#REQUIRED
	fontname	CDATA	#REQUIRED
	fontstyle	CDATA	#REQUIRED
	fontsize	CDATA	#REQUIRED
	fixed	CDATA	#IMPLIED
	transparency	CDATA	#IMPLIED
>
<!-- A raster image for the visual appearance.
image path should be relative to the package xml -->
<!ELEMENT image	EMPTY>
<!ATTLIST image
	x	CDATA	#REQUIRED
	y	CDATA	#REQUIRED
	width	CDATA	#REQUIRED
	height	CDATA	#REQUIRED       
	path	CDATA	#REQUIRED
	fixed	CDATA	#IMPLIED
>
<!-- Port is a connection point added to the visual appearance of a rich component. 
Port is bound to a metaclasses component via the attribute "name".
Ports are used to connect rich components to each-other 
portConnection=area - used for rendering relation classes
-->
<!ELEMENT ports	(port*)>
<!ELEMENT port	(open?, closed?)>
<!ATTLIST port
	id	CDATA	#IMPLIED
	name	CDATA	#REQUIRED
	type	CDATA	#REQUIRED
	x	CDATA	#REQUIRED
	y	CDATA	#REQUIRED
	portConnection	CDATA #IMPLIED
	strict	CDATA	#IMPLIED
	multi	CDATA	#IMPLIED
>
<!-- Port graphics for open/closed status. For usage example see petrinet.Transition -->
<!ELEMENT open	 (graphics)>
<!ELEMENT closed (graphics)>

<!-- Deprecated?
<!ELEMENT portname	(#PCDATA)>
<!ELEMENT xpos	(#PCDATA)>
<!ELEMENT ypos	(#PCDATA)>
<!ELEMENT datatype	(#PCDATA)>
<!ELEMENT portConnection	EMPTY>
<!ELEMENT strict	EMPTY>
<!ELEMENT multi	EMPTY>
<!ELEMENT type	(#PCDATA)> -->

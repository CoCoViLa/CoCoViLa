package ee.ioc.cs.vsle.editor;


import static java.awt.font.TextAttribute.*;

import java.awt.*;
import java.awt.event.*;
import java.awt.font.*;
import java.util.*;

import javax.swing.*;

import ee.ioc.cs.vsle.editor.RuntimeProperties.*;

/**
 *
 * @author  pavelg
 */
public class FontChooser extends javax.swing.JDialog {

    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JButton jbApply;
    private JButton jbClose;
    private JComboBox jcbElement;
    private JComboBox jcbFontNames;
    private JCheckBox jchbBold;
    private JCheckBox jchbItalic;
    private JLabel jlPreview;
    private JSpinner jspSize;
    
    private Map<Fonts, Font> elements;
    private Font currentFont;
    private boolean updating = false;
    
    /** Creates new form FontChooser */
    public FontChooser( Frame parent, Map<Fonts, Font> elements ) {
        super(parent);
        
        assert elements != null;
        
        this.elements = elements;
        
        initComponents();
        
        SwingUtilities.invokeLater( new Runnable() {
            public void run() {
                updateFromElements();
            }
        } );
    }

    /** 
     * generated by NetBeans
     */                     
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jcbElement = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jcbFontNames = new javax.swing.JComboBox();
        jchbBold = new javax.swing.JCheckBox();
        jchbItalic = new javax.swing.JCheckBox();
        jbClose = new javax.swing.JButton();
        jbApply = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jspSize = new javax.swing.JSpinner();
        jlPreview = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Font Chooser");

        jLabel1.setText("Element:");

        jcbElement.setModel( new DefaultComboBoxModel( elements.keySet().toArray() ));
        jcbElement.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbElementItemStateChanged(evt);
            }
        });
        jcbElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbElementActionPerformed(evt);
            }
        });

        jLabel2.setText("Font:");

        jcbFontNames.setModel(new DefaultComboBoxModel( GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()  ));
        jcbFontNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbFontNamesActionPerformed(evt);
            }
        });

        jchbBold.setText("Bold");
        jchbBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchbBoldActionPerformed(evt);
            }
        });

        jchbItalic.setText("Italic");
        jchbItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchbItalicActionPerformed(evt);
            }
        });

        jbClose.setText("Close");
        jbClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCloseActionPerformed(evt);
            }
        });

        jbApply.setText("Apply");

        jLabel3.setText("Size:");

        jspSize.setModel(new javax.swing.SpinnerNumberModel(12, 5, 50, 1));
        jspSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jspSizeStateChanged(evt);
            }
        });

        jlPreview.setBackground(new java.awt.Color(254, 254, 254));
        jlPreview.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPreview.setText("Preview 12345");
        jlPreview.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jlPreview.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlPreview, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jbApply)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbClose))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jspSize, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jchbBold)
                                .addGap(18, 18, 18)
                                .addComponent(jchbItalic))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jcbElement, javax.swing.GroupLayout.Alignment.LEADING, 0, 303, Short.MAX_VALUE)
                                    .addComponent(jcbFontNames, 0, 303, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(jcbElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jcbFontNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jspSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jchbBold)
                        .addComponent(jchbItalic))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jlPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbClose)
                    .addComponent(jbApply))
                .addContainerGap())
        );

        pack();
    }                  

    private void jchbItalicActionPerformed( java.awt.event.ActionEvent evt ) {
        updateFontFromGUI();
    }

    private void jchbBoldActionPerformed( java.awt.event.ActionEvent evt ) {
        updateFontFromGUI();
    }

    private void jspSizeStateChanged( javax.swing.event.ChangeEvent evt ) {
        updateFontFromGUI();
    }

    private void jcbFontNamesActionPerformed( java.awt.event.ActionEvent evt ) {
        updateFontFromGUI();
    }   

    private void jcbElementActionPerformed( java.awt.event.ActionEvent evt ) {
        updateFromElements();
    }

    private void jcbElementItemStateChanged( java.awt.event.ItemEvent evt ) {
        updateFromElements();
    } 

    private void jbCloseActionPerformed( java.awt.event.ActionEvent evt ) {
        dispose();
    }                                          

    public void setActionListener( ActionListener applyListener ) {
        assert applyListener != null;
        
        jbApply.addActionListener( applyListener );
    }
    
    /**
     * 
     */
    private void updateFromElements() {

        currentFont = elements.get( jcbElement.getSelectedItem() );
        
        updating = true;
        
        jcbFontNames.setSelectedItem( currentFont.getFamily() );
        jspSize.setValue( currentFont.getSize() );
        jchbBold.setSelected( currentFont.isBold() );
        jchbItalic.setSelected( currentFont.isItalic() );
        
        updating = false;
        
        updatePreview();
    }
    
    /**
     * 
     */
    private void updateFontFromGUI() {
        
        if( updating ) return;
        
        Map<TextAttribute, Object> attributeMap = new HashMap<TextAttribute, Object>();

        attributeMap.put(FAMILY, jcbFontNames.getSelectedItem().toString());
        attributeMap.put(SIZE, (float) (Integer) jspSize.getValue());

        if (jchbBold.isSelected()) {
            attributeMap.put(WEIGHT, WEIGHT_BOLD);
        }
        if (jchbItalic.isSelected()) {
            attributeMap.put(POSTURE, POSTURE_OBLIQUE);
        }

        currentFont = new Font(attributeMap);
        
        updatePreview();
        
        updateElements();
    }
    
    /**
     * 
     */
    private void updatePreview() {       
        jlPreview.setFont( currentFont );
        jlPreview.repaint();
    }
    
    /**
     * 
     */
    private void updateElements() {
        elements.put( (Fonts)jcbElement.getSelectedItem(), currentFont );
    }
    
    /**
     * @return
     */
    public Map<Fonts, Font> getElements() {
        return elements;
    }

}

/* The following code was generated by JFlex 1.4.1 on 2.10.06 10:50 */

/* JavaLexer.java is a generated file.  You probably want to
 * edit JavaLexer.lex to make changes.  Use JFlex to generate it.
 * To generate JavaLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main JavaLexer.lex</code><br>
 * You will then have a file called JavaLexer.java
 */

/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 1999-2002 Stephen Ostermiller
 * http://ostermiller.org/contact.pl?regarding=Syntax+Highlighting
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */

package ee.ioc.cs.vsle.util.syntax;

import java.io.*;

/** 
 * JavaLexer is a java lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  JavaLexer shredder = new JavaLexer(System.in);
 *  JavaToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 * The tokens returned should comply with the 
 * <A Href=http://java.sun.com/docs/books/jls/html/>Java 
 * Language Specification</A>.
 * @see JavaToken
 */ 


public class JavaLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  9,  0,  7,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7, 45, 18,  0,  6, 10, 49, 17, 34, 35, 20, 22, 41, 23, 33, 19, 
     4,  5,  5,  5,  3,  3,  3,  3,  2,  2, 48, 40, 44, 42, 43, 47, 
    21,  1,  1,  1, 32, 29, 30,  6,  6,  6,  6,  6, 25,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6, 27,  6,  6, 38,  8, 39, 51,  6, 
     0, 52, 14, 54, 31, 28, 15, 60, 58, 59,  6, 56, 24, 61, 13, 55, 
    62,  6, 12, 53, 16, 11, 63, 64, 26, 57, 65, 36, 50, 37, 46,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\1\1\5\5\2"+
    "\1\6\1\7\1\10\1\11\1\1\1\12\1\13\3\2"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\10\2\1\37\1\40\1\41\1\37"+
    "\2\42\1\37\2\43\1\44\2\37\2\45\1\1\1\46"+
    "\15\2\1\47\1\0\1\50\1\51\1\52\1\53\1\0"+
    "\1\54\1\55\1\0\1\56\1\57\1\60\1\61\1\62"+
    "\4\2\1\63\1\42\1\45\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\15\2"+
    "\1\77\7\2\1\42\1\0\1\100\1\101\1\45\1\0"+
    "\1\1\2\2\1\102\6\2\1\103\3\2\1\104\2\2"+
    "\1\6\1\0\1\105\2\47\1\6\2\51\1\7\2\106"+
    "\1\107\1\110\5\2\1\40\1\0\1\42\1\44\1\0"+
    "\1\45\1\111\1\112\1\113\16\2\1\114\12\2\1\42"+
    "\1\115\1\45\1\1\1\2\1\116\3\2\1\117\2\2"+
    "\1\120\2\2\1\121\1\6\1\122\1\51\1\0\2\106"+
    "\1\123\1\106\1\124\1\125\3\2\1\126\13\2\1\127"+
    "\2\2\1\130\4\2\1\131\5\2\1\132\1\2\1\1"+
    "\2\2\1\133\1\2\1\134\1\135\1\2\1\136\1\6"+
    "\1\51\1\0\1\137\1\123\4\2\1\140\1\141\3\2"+
    "\1\142\2\2\1\143\1\144\1\2\1\145\11\2\1\146"+
    "\1\147\1\150\3\2\1\151\1\6\1\51\1\0\2\2"+
    "\1\152\2\2\1\153\2\2\1\154\4\2\1\155\1\156"+
    "\4\2\1\157\1\160\1\2\1\0\1\161\1\162\11\2"+
    "\1\163\1\164\2\2\1\0\1\165\1\166\2\2\1\167"+
    "\4\2\1\170\1\171\2\2\1\172\2\2\1\173\2\2"+
    "\1\174\1\175\2\2\1\176\1\2\1\177";

  private static int [] zzUnpackAction() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0630\0\u0630\0\u0630\0\u0630\0\u0630\0\u0630\0\u0630"+
    "\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u0630\0\u0630\0\u0630\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\u0a0e\0\u0a50\0\u0a50\0\u0a50\0\u0a92\0\u0a50\0\u0ad4"+
    "\0\u0b16\0\u0b58\0\u0b9a\0\u0a50\0\u0bdc\0\u0c1e\0\u0a50\0\u0c60"+
    "\0\u0ca2\0\u0630\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e"+
    "\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e"+
    "\0\u1080\0\u0630\0\u10c2\0\u0630\0\u1104\0\u1146\0\u0630\0\u0630"+
    "\0\u1188\0\u0630\0\u0630\0\u0630\0\u0630\0\u0630\0\u11ca\0\u120c"+
    "\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u0630\0\u0630\0\u1398"+
    "\0\u0630\0\u13da\0\u0630\0\u0630\0\u0630\0\u0630\0\u0630\0\u0630"+
    "\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea"+
    "\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\204\0\u1776\0\u17b8"+
    "\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u0a50"+
    "\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\204\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\204\0\u1ce0\0\u1d22"+
    "\0\u1d64\0\204\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u0630\0\u1eae"+
    "\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u0630"+
    "\0\u0630\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u0630\0\u2208"+
    "\0\u0630\0\u0630\0\u224a\0\u0630\0\u0630\0\u228c\0\u0630\0\u22ce"+
    "\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de"+
    "\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee"+
    "\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe"+
    "\0\u2940\0\u0a50\0\u2982\0\u29c4\0\u2a06\0\204\0\u2a48\0\u2a8a"+
    "\0\u2acc\0\204\0\u2b0e\0\u2b50\0\204\0\u2b92\0\u2bd4\0\204"+
    "\0\u2c16\0\u0630\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u203a\0\u2d60"+
    "\0\204\0\204\0\u2da2\0\u2de4\0\u2e26\0\u0630\0\u2e68\0\u2eaa"+
    "\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba"+
    "\0\u30fc\0\204\0\u313e\0\u3180\0\204\0\u31c2\0\u3204\0\u3246"+
    "\0\u3288\0\204\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2\0\204"+
    "\0\u3414\0\u3456\0\u3498\0\u34da\0\204\0\u351c\0\204\0\u355e"+
    "\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u0630\0\u0630\0\u36ea"+
    "\0\u372c\0\u376e\0\u37b0\0\204\0\204\0\u37f2\0\u3834\0\u3876"+
    "\0\204\0\u38b8\0\u38fa\0\204\0\204\0\u393c\0\204\0\u397e"+
    "\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e"+
    "\0\204\0\204\0\204\0\u3bd0\0\u3c12\0\u3c54\0\204\0\u3c96"+
    "\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\204\0\u3de0\0\u3e22\0\204"+
    "\0\u3e64\0\u3ea6\0\204\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae\0\204"+
    "\0\204\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\204\0\204\0\u40f8"+
    "\0\u413a\0\204\0\204\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284"+
    "\0\u42c6\0\u4308\0\u434a\0\u438c\0\204\0\204\0\u43ce\0\u4410"+
    "\0\u4452\0\204\0\204\0\u4494\0\u44d6\0\204\0\u4518\0\u455a"+
    "\0\u459c\0\u45de\0\204\0\204\0\u4620\0\u4662\0\204\0\u46a4"+
    "\0\u46e6\0\204\0\u4728\0\u476a\0\204\0\204\0\u47ac\0\u47ee"+
    "\0\204\0\u4830\0\204";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\4\1\3\1\6\1\7"+
    "\1\6\1\10\1\3\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\3\3\1\26\2\3\1\27\1\3\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\4\3\1\56\1\57\1\3\1\60"+
    "\1\61\1\62\1\3\7\2\1\0\1\2\2\0\6\2"+
    "\4\0\1\2\2\0\11\2\23\0\17\2\6\3\1\0"+
    "\1\7\2\0\6\3\4\0\1\2\2\0\11\3\23\0"+
    "\16\3\2\63\4\4\1\63\1\0\1\63\2\0\4\63"+
    "\1\64\1\63\4\0\1\63\2\0\2\65\2\63\2\66"+
    "\1\64\2\67\1\70\22\0\20\63\1\71\1\72\1\73"+
    "\1\72\1\63\1\0\1\63\2\0\4\63\1\74\1\63"+
    "\4\0\1\63\2\0\2\65\2\75\2\76\1\74\2\77"+
    "\1\100\22\0\16\63\7\0\1\6\1\0\1\6\70\0"+
    "\7\2\1\0\1\2\2\0\1\101\5\2\4\0\1\2"+
    "\2\0\11\2\23\0\16\2\52\0\1\102\27\0\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\4\3\1\103\4\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\1\104\5\3\4\0\1\2\2\0\4\3"+
    "\1\105\4\3\23\0\1\106\15\3\1\2\6\3\1\0"+
    "\1\7\2\0\1\3\1\107\4\3\4\0\1\2\2\0"+
    "\11\3\23\0\3\3\1\110\1\3\1\111\10\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\1\112\10\3\23\0\1\113\2\3\1\114\3\3\1\115"+
    "\6\3\1\2\6\3\1\0\1\7\2\0\1\3\1\116"+
    "\4\3\4\0\1\2\2\0\11\3\23\0\6\3\1\117"+
    "\7\3\10\120\1\121\1\0\7\120\1\122\60\120\10\17"+
    "\1\123\1\0\10\17\1\124\57\17\23\0\1\125\1\126"+
    "\25\0\1\127\101\0\1\130\27\0\7\2\1\0\1\2"+
    "\2\0\6\2\3\0\1\131\1\2\2\0\11\2\23\0"+
    "\16\2\26\0\1\132\23\0\1\133\56\0\1\134\22\0"+
    "\1\135\1\136\26\0\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\11\3\23\0\3\3\1\137"+
    "\12\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\1\140\1\3\1\141\6\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\4\3\1\142\4\3\23\0\3\3\1\143\12\3"+
    "\2\0\2\144\1\145\1\144\250\0\1\146\101\0\1\147"+
    "\1\150\100\0\1\151\1\0\1\152\77\0\1\153\101\0"+
    "\1\154\6\0\1\155\72\0\1\156\7\0\1\157\71\0"+
    "\1\160\27\0\1\2\6\3\1\0\1\7\2\0\3\3"+
    "\1\161\2\3\4\0\1\2\2\0\1\162\10\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\1\163\4\3"+
    "\1\164\4\0\1\2\2\0\11\3\23\0\5\3\1\165"+
    "\1\166\3\3\1\167\1\3\1\170\1\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\1\171"+
    "\10\3\23\0\1\172\2\3\1\173\2\3\1\174\7\3"+
    "\1\2\6\3\1\0\1\7\2\0\2\3\1\175\1\3"+
    "\1\176\1\3\4\0\1\2\2\0\11\3\23\0\11\3"+
    "\1\177\4\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\11\3\23\0\3\3\1\200\12\3"+
    "\1\2\6\3\1\0\1\7\2\0\1\201\1\202\4\3"+
    "\4\0\1\2\2\0\11\3\23\0\1\203\15\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\11\3\23\0\3\3\1\204\12\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\4\0\1\2\2\0\11\3\23\0"+
    "\6\3\1\205\7\3\7\63\1\0\1\63\2\0\6\63"+
    "\4\0\1\63\2\0\12\63\22\0\20\63\4\206\1\63"+
    "\1\0\1\63\2\0\6\63\4\0\1\63\2\207\12\63"+
    "\22\0\20\63\4\70\1\63\1\0\1\63\2\0\4\63"+
    "\1\64\1\63\4\0\1\63\2\0\4\63\2\66\1\64"+
    "\2\67\1\63\22\0\20\63\4\71\1\63\1\0\1\63"+
    "\2\0\4\63\1\64\1\63\4\0\1\63\2\0\4\63"+
    "\2\66\1\64\2\67\1\70\22\0\20\63\1\71\3\72"+
    "\1\63\1\0\1\63\2\0\4\63\1\64\1\63\4\0"+
    "\1\63\2\0\2\210\2\63\2\66\1\64\2\67\1\70"+
    "\22\0\20\63\1\71\1\72\1\73\1\72\1\63\1\0"+
    "\1\63\2\0\4\63\1\74\1\63\4\0\1\63\2\0"+
    "\2\210\2\63\2\76\1\74\2\77\1\100\22\0\17\63"+
    "\5\211\1\63\1\0\1\63\2\0\3\63\2\211\1\63"+
    "\4\0\1\63\2\0\4\63\5\211\1\63\22\0\1\211"+
    "\1\63\1\211\15\63\4\212\1\63\1\0\1\63\2\0"+
    "\6\63\4\0\1\63\2\213\12\63\22\0\20\63\2\70"+
    "\1\100\1\70\1\63\1\0\1\63\2\0\4\63\1\74"+
    "\1\63\4\0\1\63\2\0\4\63\2\76\1\74\2\77"+
    "\1\63\22\0\16\63\1\2\5\214\1\2\1\0\1\2"+
    "\2\0\3\2\2\214\1\2\4\0\1\2\2\0\4\2"+
    "\5\214\23\0\1\214\1\2\1\214\14\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\215\4\0\1\2\2\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\1\216\10\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\11\3\23\0\14\3\1\217\1\3\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\220\4\0\1\2\2\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\4\3\1\221\4\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\3\3\1\222\12\3\1\2\6\3"+
    "\1\0\1\7\2\0\5\3\1\223\4\0\1\2\2\0"+
    "\11\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\11\3\23\0\3\3\1\224"+
    "\12\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\1\225\10\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\1\3\1\226\4\3\4\0\1\2"+
    "\2\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\2\3\1\227\3\3\4\0\1\2\2\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\1\230"+
    "\5\3\4\0\1\2\2\0\11\3\23\0\1\231\4\3"+
    "\1\232\10\3\1\2\6\3\1\0\1\7\2\0\1\3"+
    "\1\233\4\3\4\0\1\2\2\0\11\3\23\0\7\3"+
    "\1\234\6\3\10\235\1\236\1\0\7\235\1\237\63\235"+
    "\1\240\2\241\2\235\1\120\1\0\1\235\1\242\7\120"+
    "\57\235\3\243\3\17\2\243\1\17\1\0\1\243\1\244"+
    "\6\17\1\245\57\243\11\125\1\0\70\125\24\246\1\247"+
    "\1\250\54\246\23\0\1\251\56\0\1\2\6\3\1\0"+
    "\1\7\2\0\2\3\1\252\3\3\4\0\1\2\2\0"+
    "\11\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\11\3\23\0\1\3\1\253"+
    "\14\3\1\2\6\3\1\0\1\7\2\0\5\3\1\254"+
    "\4\0\1\2\2\0\11\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\4\3\1\255\1\3\4\0\1\2"+
    "\2\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\1\256\5\3\4\0\1\2\2\0\11\3\23\0"+
    "\16\3\2\0\4\144\11\0\1\257\14\0\2\260\1\257"+
    "\2\261\43\0\2\144\1\145\1\144\11\0\1\262\14\0"+
    "\2\263\1\262\2\264\113\0\1\265\1\266\100\0\1\267"+
    "\27\0\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\11\3\23\0\1\3\1\270\14\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\11\3\23\0\7\3\1\271\6\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\4\0\1\2\2\0\11\3\23\0"+
    "\12\3\1\272\3\3\1\2\6\3\1\0\1\7\2\0"+
    "\1\3\1\273\4\3\4\0\1\2\2\0\11\3\23\0"+
    "\1\274\15\3\1\2\6\3\1\0\1\7\2\0\2\3"+
    "\1\275\3\3\4\0\1\2\2\0\11\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\3\3\1\276\12\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\4\3"+
    "\1\277\4\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\11\3\23\0\7\3"+
    "\1\300\6\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\11\3\23\0\1\301\15\3\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\302\4\0\1\2"+
    "\2\0\11\3\23\0\1\3\1\303\14\3\1\2\6\3"+
    "\1\0\1\7\2\0\2\3\1\304\3\3\4\0\1\2"+
    "\2\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\11\3\23\0\1\305"+
    "\15\3\1\2\6\3\1\0\1\7\2\0\5\3\1\306"+
    "\4\0\1\2\2\0\11\3\23\0\1\3\1\307\14\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\12\3\1\310\3\3\1\2\6\3"+
    "\1\0\1\7\2\0\5\3\1\311\4\0\1\2\2\0"+
    "\11\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\3\3\1\312\2\3\4\0\1\2\2\0\11\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\11\3\23\0\3\3\1\313\3\3\1\314"+
    "\6\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\11\3\23\0\2\3\1\315\13\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\1\316\10\3\23\0\7\3\1\317\6\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\11\3"+
    "\23\0\7\3\1\320\6\3\2\63\4\206\1\63\1\0"+
    "\1\63\2\0\4\63\1\64\1\63\4\0\1\63\2\0"+
    "\6\63\1\64\2\67\1\63\22\0\16\63\2\0\4\321"+
    "\74\0\1\63\5\211\1\63\1\0\1\63\2\0\3\63"+
    "\2\211\1\63\4\0\1\63\2\0\2\322\2\63\5\211"+
    "\1\63\22\0\1\211\1\63\1\211\15\63\4\212\1\63"+
    "\1\0\1\63\2\0\4\63\1\74\1\63\4\0\1\63"+
    "\2\0\6\63\1\74\2\77\1\63\22\0\16\63\2\0"+
    "\4\323\74\0\1\2\5\324\1\2\1\0\1\2\2\0"+
    "\3\2\2\324\1\2\4\0\1\2\2\0\4\2\5\324"+
    "\23\0\1\324\1\2\1\324\14\2\6\3\1\0\1\7"+
    "\2\0\1\325\5\3\4\0\1\2\2\0\11\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\1\326\10\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\11\3"+
    "\23\0\7\3\1\327\6\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\11\3\23\0\1\330"+
    "\15\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\1\331\10\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\4\3"+
    "\1\332\4\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\11\3\23\0\1\333"+
    "\15\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\11\3\23\0\1\3\1\230\14\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\11\3\23\0\1\334\15\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\4\3\1\335\4\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\2\3"+
    "\1\336\3\3\4\0\1\2\2\0\11\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\3\3\1\337\12\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\11\3"+
    "\23\0\1\3\1\340\14\3\10\235\1\236\1\0\7\235"+
    "\1\122\71\235\1\0\73\235\3\120\2\235\1\236\1\0"+
    "\7\235\1\237\63\235\3\240\2\235\1\236\1\0\7\235"+
    "\1\237\61\235\5\341\2\235\1\236\1\0\4\235\2\341"+
    "\1\235\1\122\12\235\5\341\23\235\1\341\1\235\1\341"+
    "\13\235\11\243\1\0\10\243\1\342\60\243\5\343\3\243"+
    "\1\0\4\243\2\343\2\243\1\342\11\243\5\343\23\243"+
    "\1\343\1\243\1\343\13\243\10\245\1\344\1\0\10\245"+
    "\1\124\57\245\24\246\1\345\55\246\23\346\1\347\1\350"+
    "\55\346\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\11\3\23\0\10\3\1\351\5\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\4\3\1\352\4\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\4\0\1\2\2\0\4\3\1\353"+
    "\4\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\11\3\23\0\1\354\15\3"+
    "\1\2\6\3\1\0\1\7\2\0\3\3\1\355\2\3"+
    "\4\0\1\2\2\0\11\3\23\0\16\3\2\0\4\321"+
    "\20\0\2\207\54\0\4\323\20\0\2\213\124\0\1\356"+
    "\27\0\1\2\6\3\1\0\1\7\2\0\5\3\1\357"+
    "\4\0\1\2\2\0\11\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\11\3"+
    "\23\0\1\360\15\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\4\3\1\361\4\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\11\3\23\0\7\3\1\362\6\3\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\363\4\0\1\2"+
    "\2\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\11\3\23\0\2\3"+
    "\1\364\13\3\1\2\6\3\1\0\1\7\2\0\1\3"+
    "\1\365\4\3\4\0\1\2\2\0\11\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\2\3\1\366\13\3\1\2\6\3"+
    "\1\0\1\7\2\0\5\3\1\367\4\0\1\2\2\0"+
    "\11\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\11\3\23\0\1\3\1\370"+
    "\14\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\11\3\23\0\2\3\1\371\13\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\4\3\1\372\4\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\373\4\0\1\2\2\0\11\3"+
    "\23\0\1\3\1\374\14\3\1\2\6\3\1\0\1\7"+
    "\2\0\1\3\1\375\4\3\4\0\1\2\2\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\4\3\1\376\4\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\5\3\1\377\4\0"+
    "\1\2\2\0\11\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\4\0\1\2\2\0\1\u0100\10\3"+
    "\23\0\3\3\1\u0101\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\11\3\23\0\3\3"+
    "\1\u0102\12\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\1\u0103\10\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\u0104\4\0\1\2"+
    "\2\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\11\3\23\0\13\3"+
    "\1\u0105\2\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\11\3\23\0\4\3\1\u0106\11\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\1\u0107\15\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\4\0\1\2\2\0\7\3\1\u0108"+
    "\1\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\1\u0109\10\3\23\0\16\3"+
    "\2\0\4\321\11\0\1\257\16\0\1\257\2\261\43\0"+
    "\4\323\11\0\1\262\16\0\1\262\2\264\41\0\1\2"+
    "\5\u010a\1\2\1\0\1\2\2\0\3\2\2\u010a\1\2"+
    "\4\0\1\2\2\0\4\2\5\u010a\23\0\1\u010a\1\2"+
    "\1\u010a\14\2\6\3\1\0\1\7\2\0\1\3\1\u010b"+
    "\4\3\4\0\1\2\2\0\11\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\11\3\23\0\13\3\1\u010c\2\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\4\0\1\2\2\0\11\3\23\0"+
    "\4\3\1\u010d\11\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\4\3\1\u010e\4\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\5\3\1\u010f"+
    "\4\0\1\2\2\0\11\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\1\u0110"+
    "\10\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\11\3\23\0\1\3\1\u0111"+
    "\14\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\11\3\23\0\14\3\1\u0112\1\3\1\235"+
    "\5\u0113\2\235\1\236\1\0\4\235\2\u0113\1\235\1\122"+
    "\12\235\5\u0113\23\235\1\u0113\1\235\1\u0113\13\235\1\243"+
    "\5\u0114\3\243\1\0\4\243\2\u0114\2\243\1\342\11\243"+
    "\5\u0114\23\243\1\u0114\1\243\1\u0114\13\243\3\0\3\245"+
    "\2\0\1\245\2\0\1\u0115\7\245\57\0\23\246\1\u0116"+
    "\1\345\55\246\24\346\1\350\100\346\1\u0117\1\350\55\346"+
    "\1\2\6\3\1\0\1\7\2\0\2\3\1\u0118\3\3"+
    "\4\0\1\2\2\0\11\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\1\u0119\5\3\4\0\1\2\2\0"+
    "\11\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\1\u011a\10\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\1\3\1\u011b\4\3"+
    "\4\0\1\2\2\0\11\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\11\3"+
    "\23\0\1\3\1\u011c\14\3\1\2\6\3\1\0\1\7"+
    "\2\0\1\3\1\u011d\4\3\4\0\1\2\2\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\11\3\23\0\2\3\1\u011e\13\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\7\3\1\u011f\6\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\11\3"+
    "\23\0\6\3\1\u0120\7\3\1\2\6\3\1\0\1\7"+
    "\2\0\5\3\1\u0121\4\0\1\2\2\0\11\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\11\3\23\0\7\3\1\u0122\6\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\11\3\23\0\2\3\1\u0123\13\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\4\0\1\2\2\0\11\3\23\0"+
    "\1\3\1\u0124\14\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\11\3\23\0\6\3\1\u0125"+
    "\7\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\11\3\23\0\7\3\1\u0126\6\3\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\u0127\4\0\1\2"+
    "\2\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\1\3\1\u0128\4\3\4\0\1\2\2\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\11\3\23\0\1\u0129\15\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\4\3\1\u012a\4\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\1\3\1\u012b\4\3\4\0\1\2\2\0"+
    "\11\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\11\3\23\0\7\3\1\u012c"+
    "\6\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\4\3\1\u012d\4\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\11\3\23\0\1\u012e\15\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\11\3\23\0\1\u012f"+
    "\15\3\1\2\6\3\1\0\1\7\2\0\5\3\1\u0130"+
    "\4\0\1\2\2\0\11\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\4\3"+
    "\1\u0131\4\3\23\0\16\3\1\2\5\3\1\2\1\0"+
    "\1\2\2\0\3\2\2\3\1\2\4\0\1\2\2\0"+
    "\4\2\5\3\23\0\1\3\1\2\1\3\14\2\6\3"+
    "\1\0\1\7\2\0\2\3\1\u0132\3\3\4\0\1\2"+
    "\2\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\4\3\1\u0133\4\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\11\3\23\0\1\u0134\15\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\1\u0135\10\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\11\3\23\0\7\3"+
    "\1\u0136\6\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\11\3\23\0\1\3\1\u0137\14\3"+
    "\1\235\5\u0138\2\235\1\236\1\0\4\235\2\u0138\1\235"+
    "\1\122\12\235\5\u0138\23\235\1\u0138\1\235\1\u0138\13\235"+
    "\1\243\5\u0139\3\243\1\0\4\243\2\u0139\2\243\1\342"+
    "\11\243\5\u0139\23\243\1\u0139\1\243\1\u0139\13\243\1\0"+
    "\5\u013a\10\0\2\u013a\14\0\5\u013a\23\0\1\u013a\1\0"+
    "\1\u013a\13\0\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\7\3\1\u013b\1\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\1\u013c\10\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\4\0\1\2\2\0\4\3\1\u013d"+
    "\4\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\11\3\23\0\1\u013e\15\3"+
    "\1\2\6\3\1\0\1\7\2\0\5\3\1\u013f\4\0"+
    "\1\2\2\0\11\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\4\0\1\2\2\0\11\3\23\0"+
    "\2\3\1\u0140\13\3\1\2\6\3\1\0\1\7\2\0"+
    "\1\3\1\u0141\4\3\4\0\1\2\2\0\11\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\4\3\1\u0142"+
    "\1\3\4\0\1\2\2\0\11\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\11\3\23\0\6\3\1\u0143\7\3\1\2\6\3\1\0"+
    "\1\7\2\0\2\3\1\u0144\3\3\4\0\1\2\2\0"+
    "\11\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\4\3\1\u0145\1\3\4\0\1\2\2\0\11\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\2\3\1\u0146"+
    "\3\3\4\0\1\2\2\0\11\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\11\3\23\0\11\3\1\u0147\4\3\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\u0148\4\0\1\2\2\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\11\3\23\0\2\3\1\u0149\13\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\2\3\1\u014a\13\3\1\2\6\3"+
    "\1\0\1\7\2\0\5\3\1\u014b\4\0\1\2\2\0"+
    "\11\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\11\3\23\0\10\3\1\u014c"+
    "\5\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\11\3\23\0\7\3\1\u014d\6\3\1\2"+
    "\6\3\1\0\1\7\2\0\2\3\1\u014e\3\3\4\0"+
    "\1\2\2\0\11\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\4\0\1\2\2\0\11\3\23\0"+
    "\5\3\1\u014f\10\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\4\3\1\u0150\4\3\23\0"+
    "\16\3\1\235\5\120\2\235\1\236\1\0\4\235\2\120"+
    "\1\235\1\122\12\235\5\120\23\235\1\120\1\235\1\120"+
    "\13\235\1\243\5\17\3\243\1\0\4\243\2\17\2\243"+
    "\1\342\11\243\5\17\23\243\1\17\1\243\1\17\13\243"+
    "\1\0\5\u0151\10\0\2\u0151\14\0\5\u0151\23\0\1\u0151"+
    "\1\0\1\u0151\13\0\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\11\3\23\0\1\3\1\u0152"+
    "\14\3\1\2\6\3\1\0\1\7\2\0\5\3\1\u0153"+
    "\4\0\1\2\2\0\11\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\11\3"+
    "\23\0\2\3\1\u0154\13\3\1\2\6\3\1\0\1\7"+
    "\2\0\4\3\1\u0155\1\3\4\0\1\2\2\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\11\3\23\0\3\3\1\u0156\12\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\7\3\1\u0157\6\3\1\2\6\3"+
    "\1\0\1\7\2\0\1\u0158\5\3\4\0\1\2\2\0"+
    "\11\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\4\0\1\2\2\0\11\3\23\0\1\u0159\15\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\2\3\1\u015a\13\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\4\3"+
    "\1\u015b\4\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\5\3\1\u015c\4\0\1\2\2\0\11\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\4\3\1\u015d\4\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\4\3\1\u015e\4\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\4\0\1\2\2\0\1\u015f\10\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\2\3"+
    "\1\u0160\3\3\4\0\1\2\2\0\11\3\23\0\16\3"+
    "\1\0\5\u0161\10\0\2\u0161\14\0\5\u0161\23\0\1\u0161"+
    "\1\0\1\u0161\13\0\1\2\6\3\1\0\1\7\2\0"+
    "\5\3\1\u0162\4\0\1\2\2\0\11\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\12\3\1\u0163\3\3\1\2\6\3"+
    "\1\0\1\7\2\0\2\3\1\u0164\3\3\4\0\1\2"+
    "\2\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\11\3\23\0\2\3"+
    "\1\u0165\13\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\4\3\1\u0166\4\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\2\3\1\u0167\13\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\4\3"+
    "\1\u0168\4\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\2\3\1\u0169\3\3\4\0\1\2\2\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\4\3\1\u016a\4\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\4\3\1\u016b\4\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\5\3\1\u016c\4\0\1\2\2\0"+
    "\11\3\23\0\16\3\1\0\5\245\10\0\2\245\14\0"+
    "\5\245\23\0\1\245\1\0\1\245\13\0\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\11\3"+
    "\23\0\7\3\1\u016d\6\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\11\3\23\0\1\u016e"+
    "\15\3\1\2\6\3\1\0\1\7\2\0\6\3\4\0"+
    "\1\2\2\0\4\3\1\u016f\4\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\4\0\1\2\2\0"+
    "\11\3\23\0\3\3\1\u0170\12\3\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\u0171\4\0\1\2\2\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\7\3\1\u0172\1\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\15\3\1\u0173\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\u0174\4\0\1\2\2\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\4\3"+
    "\1\u0175\1\3\4\0\1\2\2\0\11\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\1\3\1\u0176\14\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\4\0\1\2\2\0\4\3"+
    "\1\u0177\4\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\4\0\1\2\2\0\11\3\23\0\7\3"+
    "\1\u0178\6\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\4\0\1\2\2\0\7\3\1\u0179\1\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\4\0\1\2"+
    "\2\0\11\3\23\0\3\3\1\u017a\12\3\1\2\6\3"+
    "\1\0\1\7\2\0\2\3\1\u017b\3\3\4\0\1\2"+
    "\2\0\11\3\23\0\16\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18546];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\27\1\10\11\4\1\3\11\32\1\1\11\16\1"+
    "\1\0\1\11\1\1\1\11\1\1\1\0\2\11\1\0"+
    "\5\11\7\1\2\11\1\1\1\11\1\1\6\11\26\1"+
    "\1\0\3\1\1\0\22\1\1\0\1\11\10\1\2\11"+
    "\5\1\1\11\1\0\2\11\1\0\2\11\1\1\1\11"+
    "\52\1\1\11\1\1\1\0\11\1\1\11\46\1\1\0"+
    "\2\11\42\1\1\0\26\1\1\0\17\1\1\0\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int lastToken;
    private int nextState=YYINITIAL;
    
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }
        
    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }
            } else {
                in = System.in;
            }
            JavaLexer shredder = new JavaLexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != JavaToken.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    }  

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { lastToken = JavaToken.OPERATOR_LESS_THAN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 128: break;
        case 14: 
          { lastToken = JavaToken.SEPARATOR_RPAREN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 129: break;
        case 15: 
          { lastToken = JavaToken.SEPARATOR_LBRACE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 130: break;
        case 52: 
          { lastToken = JavaToken.OPERATOR_EQUAL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 131: break;
        case 62: 
          { lastToken = JavaToken.OPERATOR_BITWISE_XOR_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 132: break;
        case 5: 
          { lastToken = JavaToken.OPERATOR_MOD;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 133: break;
        case 61: 
          { lastToken = JavaToken.OPERATOR_LOGICAL_OR;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 134: break;
        case 47: 
          { lastToken = JavaToken.OPERATOR_ADD_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 135: break;
        case 97: 
          { lastToken = JavaToken.RESERVED_WORD_SUPER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 136: break;
        case 86: 
          { lastToken = JavaToken.OPERATOR_SHIFT_RIGHT_UNSIGNED_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 137: break;
        case 55: 
          { lastToken = JavaToken.OPERATOR_LESS_THAN_OR_EQUAL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 138: break;
        case 104: 
          { lastToken = JavaToken.RESERVED_WORD_NATIVE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 139: break;
        case 39: 
          { lastToken = JavaToken.ERROR_UNCLOSED_CHARACTER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 140: break;
        case 92: 
          { lastToken = JavaToken.RESERVED_WORD_FLOAT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 141: break;
        case 78: 
          { lastToken = JavaToken.LITERAL_NULL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 142: break;
        case 122: 
          { lastToken = JavaToken.RESERVED_WORD_INTERFACE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 143: break;
        case 38: 
          { lastToken = JavaToken.OPERATOR_MOD_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 144: break;
        case 34: 
          { Double d;
    try {
        d = Double.valueOf(yytext());
        if (d.isInfinite() || d.compareTo(new Double(0d)) == 0){
            lastToken = JavaToken.ERROR_DOUBLE_SIZE;
        } else {
            lastToken = JavaToken.LITERAL_DOUBLE;
        }
    } catch (NumberFormatException e){
        lastToken = JavaToken.ERROR_DOUBLE_SIZE;
    } 
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 145: break;
        case 70: 
          { lastToken = JavaToken.ERROR_UNCLOSED_COMMENT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 146: break;
        case 54: 
          { lastToken = JavaToken.OPERATOR_SHIFT_RIGHT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 147: break;
        case 100: 
          { lastToken = JavaToken.RESERVED_WORD_CATCH;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 148: break;
        case 111: 
          { lastToken = JavaToken.RESERVED_WORD_BOOLEAN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 149: break;
        case 89: 
          { lastToken = JavaToken.RESERVED_WORD_GOTO;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 150: break;
        case 59: 
          { lastToken = JavaToken.OPERATOR_LOGICAL_AND;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 151: break;
        case 60: 
          { lastToken = JavaToken.OPERATOR_BITWISE_OR_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 152: break;
        case 69: 
          { lastToken = JavaToken.LITERAL_CHARACTER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 153: break;
        case 27: 
          { lastToken = JavaToken.OPERATOR_COLON;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 154: break;
        case 121: 
          { lastToken = JavaToken.RESERVED_WORD_TRANSIENT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 155: break;
        case 10: 
          { lastToken = JavaToken.OPERATOR_ADD;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 156: break;
        case 114: 
          { lastToken = JavaToken.RESERVED_WORD_DEFAULT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 157: break;
        case 58: 
          { lastToken = JavaToken.OPERATOR_BITWISE_AND_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 158: break;
        case 125: 
          { lastToken = JavaToken.RESERVED_WORD_IMPLEMENTS;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 159: break;
        case 84: 
          { lastToken = JavaToken.RESERVED_WORD_LONG;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 160: break;
        case 87: 
          { lastToken = JavaToken.RESERVED_WORD_CASE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 161: break;
        case 48: 
          { lastToken = JavaToken.OPERATOR_DECREMENT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 162: break;
        case 40: 
          { lastToken = JavaToken.ERROR_MALFORMED_CHARACTER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 163: break;
        case 50: 
          { lastToken = JavaToken.OPERATOR_IMPLIES;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 164: break;
        case 124: 
          { lastToken = JavaToken.RESERVED_WORD_INSTANCEOF;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 165: break;
        case 53: 
          { lastToken = JavaToken.OPERATOR_GREATER_THAN_OR_EQUAL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 166: break;
        case 7: 
          { /* most of these errors have to be caught down near the end of the file.
     * This way, previous expressions of the same length have precedence.
     * This is really useful for catching anything bad by just allowing it 
     * to slip through the cracks. 
     */ 
    lastToken = JavaToken.ERROR_UNCLOSED_STRING;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 167: break;
        case 80: 
          { lastToken = JavaToken.LITERAL_BOOLEAN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 168: break;
        case 18: 
          { lastToken = JavaToken.SEPARATOR_RBRACKET;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 169: break;
        case 66: 
          { lastToken = JavaToken.RESERVED_WORD_NEW;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 170: break;
        case 106: 
          { lastToken = JavaToken.RESERVED_WORD_DOUBLE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 171: break;
        case 81: 
          { lastToken = JavaToken.RESERVED_WORD_THIS;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 172: break;
        case 30: 
          { lastToken = JavaToken.OPERATOR_BITWISE_XOR;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 173: break;
        case 31: 
          { lastToken = JavaToken.ERROR_FLOAT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 174: break;
        case 37: 
          { lastToken = JavaToken.LITERAL_DOUBLE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 175: break;
        case 8: 
          { lastToken = JavaToken.OPERATOR_DIVIDE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 176: break;
        case 29: 
          { lastToken = JavaToken.OPERATOR_BITWISE_OR;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 177: break;
        case 19: 
          { lastToken = JavaToken.SEPARATOR_SEMICOLON;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 178: break;
        case 63: 
          { lastToken = JavaToken.RESERVED_WORD_IF;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 179: break;
        case 101: 
          { lastToken = JavaToken.RESERVED_WORD_CONST;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 180: break;
        case 91: 
          { lastToken = JavaToken.RESERVED_WORD_BREAK;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 181: break;
        case 17: 
          { lastToken = JavaToken.SEPARATOR_LBRACKET;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 182: break;
        case 20: 
          { lastToken = JavaToken.SEPARATOR_COMMA;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 183: break;
        case 36: 
          { /* catch the case of a zero in parsing, so that we do not incorrectly
     * give an error that a number was rounded to zero
     */
    lastToken = JavaToken.LITERAL_FLOATING_POINT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 184: break;
        case 35: 
          { /* An Octal number cannot be too big.  After removing 
     * initial zeros, It can have 11 digits, the first
     * of which must be 3 or less.
     */
    lastToken = JavaToken.LITERAL_INTEGER_OCTAL;
    int i;     
    String text = yytext();
    int length = text.length();
    for (i=1 ; i<length-11; i++){
        //check for initial zeros
        if (yytext().charAt(i) != '0'){ 
            lastToken = JavaToken.ERROR_INTEGER_OCTAL_SIZE;
        }
    }
    if (length - i > 11){
        lastToken = JavaToken.ERROR_INTEGER_OCTAL_SIZE;
    } else if (length - i == 11){
        // if the rest of the number is as big as possible
        // the first digit can only be 3 or less
        if (text.charAt(i) != '0' && text.charAt(i) != '1' && 
        text.charAt(i) != '2' && text.charAt(i) != '3'){
            lastToken = JavaToken.ERROR_INTEGER_OCTAL_SIZE;
        }
    }
    // Otherwise, it should be OK  
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 185: break;
        case 105: 
          { lastToken = JavaToken.RESERVED_WORD_THROWS;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 186: break;
        case 72: 
          { lastToken = JavaToken.SPEC_END;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 187: break;
        case 16: 
          { lastToken = JavaToken.SEPARATOR_RBRACE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 188: break;
        case 115: 
          { lastToken = JavaToken.RESERVED_WORD_PRIVATE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 189: break;
        case 108: 
          { lastToken = JavaToken.RESERVED_WORD_SWITCH;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 190: break;
        case 67: 
          { lastToken = JavaToken.RESERVED_WORD_FOR;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 191: break;
        case 68: 
          { lastToken = JavaToken.RESERVED_WORD_TRY;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 192: break;
        case 22: 
          { lastToken = JavaToken.OPERATOR_GREATER_THAN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 193: break;
        case 46: 
          { lastToken = JavaToken.OPERATOR_INCREMENT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 194: break;
        case 3: 
          { /* At this point, the number we found could still be too large.
     * If it is too large, we need to return an error.
     * Java has methods built in that will decode from a string
     * and throw an exception the number is too large 
     */     
    String text = yytext();
    try {
        /* bigger negatives are allowed than positives.  Thus
         * we have to be careful to make sure a neg sign is preserved
         */
        if (lastToken == JavaToken.OPERATOR_SUBTRACT){
            Integer.decode('-' + text);
        } else {
            Integer.decode(text);
        }
        lastToken = JavaToken.LITERAL_INTEGER_DECIMAL;
    } catch (NumberFormatException e){
        lastToken = JavaToken.ERROR_INTEGER_DECIMIAL_SIZE;
    }
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 195: break;
        case 42: 
          { lastToken = JavaToken.LITERAL_STRING;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 196: break;
        case 112: 
          { lastToken = JavaToken.RESERVED_WORD_FINALLY;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 197: break;
        case 43: 
          { lastToken = JavaToken.COMMENT_END_OF_LINE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 198: break;
        case 93: 
          { lastToken = JavaToken.RESERVED_WORD_FINAL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 199: break;
        case 13: 
          { lastToken = JavaToken.SEPARATOR_LPAREN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 200: break;
        case 77: 
          { /* A Hex long cannot be too big.  After removing 
     * initial zeros, It can have 17 digits, the last of which is
     * the L or l
     */
    lastToken = JavaToken.LITERAL_LONG_HEXIDECIMAL;
    int i;
    String text = yytext();
    int length = text.length();
    for (i=2 ; i<length-17; i++){
        //check for initial zeros
        if (text.charAt(i) != '0'){ 
            lastToken = JavaToken.ERROR_LONG_HEXIDECIMAL_SIZE;
        }
    }
    if (length - i > 17){
        lastToken = JavaToken.ERROR_LONG_HEXIDECIMAL_SIZE;
    }
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 201: break;
        case 76: 
          { lastToken = JavaToken.RESERVED_WORD_INT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 202: break;
        case 95: 
          { lastToken = JavaToken.COMMENT_TRADITIONAL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 203: break;
        case 88: 
          { lastToken = JavaToken.RESERVED_WORD_CHAR;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 204: break;
        case 4: 
          { lastToken = JavaToken.WHITE_SPACE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 205: break;
        case 120: 
          { lastToken = JavaToken.RESERVED_WORD_VOLATILE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 206: break;
        case 117: 
          { lastToken = JavaToken.RESERVED_WORD_ABSTRACT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 207: break;
        case 9: 
          { lastToken = JavaToken.OPERATOR_MULTIPLY;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 208: break;
        case 44: 
          { lastToken = JavaToken.OPERATOR_DIVIDE_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 209: break;
        case 110: 
          { lastToken = JavaToken.RESERVED_WORD_PUBLIC;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 210: break;
        case 99: 
          { lastToken = JavaToken.RESERVED_WORD_CLASS;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 211: break;
        case 82: 
          { lastToken = JavaToken.ERROR_MALFORMED_STRING;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 212: break;
        case 25: 
          { lastToken = JavaToken.OPERATOR_BITWISE_COMPLIMENT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 213: break;
        case 64: 
          { /* An Octal number cannot be too big.  After removing 
     * initial zeros, It can have 23 digits, the first
     * of which must be 1 or less.  The last will be the L or l
     * at the end.
     */
    lastToken = JavaToken.LITERAL_LONG_OCTAL;
    int i; 
    String text = yytext();
    int length = text.length();
    for (i=1 ; i<length-23; i++){
        //check for initial zeros
        if (text.charAt(i) != '0'){ 
            lastToken = JavaToken.ERROR_LONG_OCTAL_SIZE;
        }
    }
    if (length - i > 23){
        lastToken = JavaToken.ERROR_LONG_OCTAL_SIZE;
    } else if (length - i == 23){
        // if the rest of the number is as big as possible
        // the first digit can only be 3 or less
        if (text.charAt(i) != '0' && text.charAt(i) != '1'){
            lastToken = JavaToken.ERROR_LONG_OCTAL_SIZE;
        }
    }
    // Otherwise, it should be OK  
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 214: break;
        case 103: 
          { lastToken = JavaToken.RESERVED_WORD_RETURN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 215: break;
        case 1: 
          { lastToken = JavaToken.ERROR_IDENTIFIER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 216: break;
        case 65: 
          { /* A Hex number cannot be too big.  After removing 
     * initial zeros, It can have 8 digits
     */
    lastToken = JavaToken.LITERAL_INTEGER_HEXIDECIMAL;
    int i;    
    String text = yytext();
    int length = text.length();
    for (i=2 ; i<length-8; i++){
        //check for initial zeros
        if (text.charAt(i) != '0'){ 
            lastToken = JavaToken.ERROR_INTEGER_HEXIDECIMAL_SIZE;
        }
    }
    if (length - i > 8){
        lastToken = JavaToken.ERROR_INTEGER_HEXIDECIMAL_SIZE;
    }
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 217: break;
        case 45: 
          { lastToken = JavaToken.OPERATOR_MULTIPLY_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 218: break;
        case 28: 
          { lastToken = JavaToken.OPERATOR_BITWISE_AND;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 219: break;
        case 127: 
          { lastToken = JavaToken.RESERVED_WORD_SPECIFICATION;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 220: break;
        case 113: 
          { lastToken = JavaToken.RESERVED_WORD_EXTENDS;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 221: break;
        case 32: 
          { /* Sun s java has a few bugs here.  Their MAX_FLOAT and MIN_FLOAT do not
     * quite match the spec.  Its not far off, so we will deal.  If they fix
     * then we are fixed.  So all good.
     */ 
    Float f;
    try {
        f = Float.valueOf(yytext());
        if (f.isInfinite() || f.compareTo(new Float(0f)) == 0){
            lastToken = JavaToken.ERROR_FLOAT_SIZE;
        } else {
            lastToken = JavaToken.LITERAL_FLOATING_POINT;
        }
    } catch (NumberFormatException e){
        lastToken = JavaToken.ERROR_FLOAT_SIZE;
    }
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 222: break;
        case 6: 
          { lastToken = JavaToken.ERROR_MALFORMED_UNCLOSED_CHARACTER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 223: break;
        case 96: 
          { lastToken = JavaToken.RESERVED_WORD_ALIAS;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 224: break;
        case 24: 
          { lastToken = JavaToken.OPERATOR_LOGICAL_NOT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 225: break;
        case 123: 
          { lastToken = JavaToken.RESERVED_WORD_PROTECTED;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 226: break;
        case 74: 
          { lastToken = JavaToken.OPERATOR_SHIFT_RIGHT_UNSIGNED;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 227: break;
        case 11: 
          { lastToken = JavaToken.OPERATOR_SUBTRACT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 228: break;
        case 12: 
          { lastToken = JavaToken.SEPARATOR_PERIOD;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 229: break;
        case 33: 
          { String text = yytext();
    try {
        if (lastToken == JavaToken.OPERATOR_SUBTRACT){
            Long.decode('-' + text.substring(0,text.length()-1));
        } else {
            Long.decode(text.substring(0,text.length()-1));
        }
        lastToken = JavaToken.LITERAL_LONG_DECIMAL;
    } catch (NumberFormatException e){  
        lastToken = JavaToken.ERROR_LONG_DECIMIAL_SIZE;
    }
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 230: break;
        case 107: 
          { lastToken = JavaToken.RESERVED_WORD_STATIC;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 231: break;
        case 57: 
          { lastToken = JavaToken.OPERATOR_NOT_EQUAL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 232: break;
        case 85: 
          { lastToken = JavaToken.RESERVED_WORD_ELSE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 233: break;
        case 73: 
          { lastToken = JavaToken.OPERATOR_SHIFT_RIGHT_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 234: break;
        case 51: 
          { lastToken = JavaToken.RESERVED_WORD_DO;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 235: break;
        case 126: 
          { lastToken = JavaToken.RESERVED_WORD_SYNCHRONIZED;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 236: break;
        case 109: 
          { lastToken = JavaToken.RESERVED_WORD_IMPORT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 237: break;
        case 102: 
          { lastToken = JavaToken.RESERVED_WORD_WHILE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 238: break;
        case 21: 
          { lastToken = JavaToken.OPERATOR_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 239: break;
        case 94: 
          { lastToken = JavaToken.RESERVED_WORD_THROW;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 240: break;
        case 83: 
          { lastToken = JavaToken.COMMENT_DOCUMENTATION;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 241: break;
        case 56: 
          { lastToken = JavaToken.OPERATOR_SHIFT_LEFT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 242: break;
        case 116: 
          { lastToken = JavaToken.RESERVED_WORD_PACKAGE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 243: break;
        case 90: 
          { lastToken = JavaToken.RESERVED_WORD_VOID;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 244: break;
        case 79: 
          { lastToken = JavaToken.RESERVED_WORD_BYTE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 245: break;
        case 41: 
          { lastToken = JavaToken.ERROR_MALFORMED_UNCLOSED_STRING;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 246: break;
        case 49: 
          { lastToken = JavaToken.OPERATOR_SUBTRACT_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 247: break;
        case 119: 
          { lastToken = JavaToken.RESERVED_WORD_CONTINUE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 248: break;
        case 26: 
          { lastToken = JavaToken.OPERATOR_QUESTION;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 249: break;
        case 98: 
          { lastToken = JavaToken.RESERVED_WORD_SHORT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 250: break;
        case 118: 
          { lastToken = JavaToken.RESERVED_WORD_STRICTFP;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 251: break;
        case 71: 
          { lastToken = JavaToken.SPEC_BEGIN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 252: break;
        case 75: 
          { lastToken = JavaToken.OPERATOR_SHIFT_LEFT_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 253: break;
        case 2: 
          { lastToken = JavaToken.IDENTIFIER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 254: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
